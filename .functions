#!/usr/bin/env bash

# Show a list of terminal colors names and displays the color
function terminal-colors-list() {
    for i in {0..255}; do
        printf "\x1b[38;5;${i}mcolour${i}\n"
    done
}

# Creates a backup of secret .files in Google Drive
function backup-security() {
    DEST=backup-secret-dotfiles.zip
    cd ${HOME}
    zip /tmp/${DEST} .rclone.conf # This is a trick so the `zip -u` (update zipfile) works
    for i in .aws .netrc .ssh .gnupg .ultrahook .extra .rclone.conf .todoist.config.json .intelephense; do
        zip -r -u /tmp/${DEST} ${i}
    done
    cd /tmp
    rclone -P copy ${DEST} GdriveMario:/Backups/
}

# Updates Python packages
function update-pip() {
    pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U
}

# Diff the contents of 2 zip files
function diff-zip {
    if [ ! -f "$1" -o ! -f "$2" ]; then
        echo "Diff the contents of 2 zip files. Usage:"
        echo "  $0 <file1.zip> <file2.zip>"
        return
    fi
    file1=$1
    file2=$2
    diff \
        <(unzip -vqq $file1 | awk '{$2=""; $3=""; $4=""; $5=""; $6=""; print}' | sort -k3) \
        <(unzip -vqq $file2 | awk '{$2=""; $3=""; $4=""; $5=""; $6=""; print}' | sort -k3)
}

# SSH to a WPEngine environment using their ssh gateway
function ssh-wpengine {
    if [ -z $1 ]; then
        echo 'ssh-wpengine <environment>'
        return
    fi
    ssh -i ~/.ssh/wpengine_ed25519 -o IdentitiesOnly=yes $1@$1.ssh.wpengine.net
}

# KEOKEE helper. Look for user/password in the NOCO database
function noco-pass {
    if [ "${NOCO_TOKEN}" = "" ]; then
        echo "You have to set the environment value NOCO_TOKEN"
        return
    fi
    if [ "$1" = "" ]; then
        echo "Usage noco-pass <client name>"
        return
    fi
    QUERY=$(echo $1 | sed 's/[ ]+/%25/g')
    echo "Looking PASSWORD for ${QUERY} in NOCO:"
    curl --silent --request GET \
        --url "https://noco.keokee.com/api/v2/tables/md_pl3sr1rtjqsgay/records?offset=0&limit=100&where=(Hosting%20Clients%2Clike%2C%25${QUERY}%25)&viewId=vw_pxoltlm6jdqya6" \
        --header "xc-token: ${NOCO_TOKEN}" |
        jq '.list[] | { client: .["Hosting Clients"][0].["Client Name"], user: .Username, pass: .Password, id: .["Hosting Clients"][0].["ncRecordId"]  }'

}

# KEOKEE helper. Look for web address in the NOCO database
function noco-website {
    if [ "${NOCO_TOKEN}" = "" ]; then
        echo "You have to set the environment value NOCO_TOKEN"
        return
    fi
    if [ "$1" = "" ]; then
        echo "Usage noco-pass <client name>"
        return
    fi
    QUERY=$(echo $1 | sed 's/[ ]+/%25/g')
    echo "Looking WEBSITE for ${QUERY} in NOCO:"
    curl --silent --request GET \
        --url "https://noco.keokee.com/api/v2/tables/md_6o8hnu4g5grkd8/records?offset=0&limit=100&where=(Client%20Name%2Clike%2C%25${QUERY}%25)&viewId=vw_9iah3ysaucva77" \
        --header "xc-token: ${NOCO_TOKEN}" |
        jq '.list[] | { client: .["Client Name"], web: .["Web Address"]  }'

}

# vim: syntax=sh ts=4 sw=4 et
